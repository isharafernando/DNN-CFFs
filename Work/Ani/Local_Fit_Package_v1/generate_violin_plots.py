import os
import glob
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt

# Define CFF labels that are used in your process
cff_labels = ['ReH', 'ReE', 'ReHt', 'dvcs']

# Function to aggregate data from the CSV files generated by different GPUs
def aggregate_data_from_csvs(cff_labels, csv_dir='CFF_Residuals'):
    """
    Aggregate residual and standard deviation data from multiple CSV files generated by different GPUs.
    Returns the aggregated temp_data dictionary.
    """
    temp_data = {cff: {'kinematic_sets': [], 'residuals': [], 'std_devs': []} for cff in cff_labels}

    # Collect all CSV files (you might need to adjust this based on your actual file naming convention)
    csv_files = glob.glob(os.path.join(csv_dir, 'CFF_Residuals_Set_*.csv'))
    
    # Loop over each CSV file and aggregate the data
    for csv_file in csv_files:
        df = pd.read_csv(csv_file)
        set_number = df['Set_Number'].values[0]  # Get the set number from the file
        
        for cff_label in cff_labels:
            residual = df[f'{cff_label}_Residual'].values[0]
            std_dev = df[f'{cff_label}_Std_Dev'].values[0]
            
            # Append the data to the temp_data dictionary
            temp_data[cff_label]['kinematic_sets'].append(set_number)
            temp_data[cff_label]['residuals'].append(residual)
            temp_data[cff_label]['std_devs'].append(std_dev)
    
    return temp_data

# Function to generate and save violin plots for each CFF
def generate_violin_plots_for_cffs(temp_data, cff_labels, output_dir='ViolinPlots'):
    """
    Generates and saves violin plots for each CFF using the data stored in temp_data.
    
    Parameters:
    - temp_data: A dictionary that holds residuals and std_devs for each CFF across kinematic sets.
    - cff_labels: List of CFF labels (e.g., ['ReH', 'ReE', 'ReHt', 'dvcs']).
    """
    if not os.path.exists(output_dir):
        os.makedirs(output_dir)

    for cff_label, data in temp_data.items():
        kinematic_sets = data['kinematic_sets']
        residuals_list = data['residuals']
        std_devs_list = data['std_devs']

        # Ensure kinematic_sets are numeric
        kinematic_sets = [int(k) for k in kinematic_sets]  # Convert to integer if needed

        # Prepare the data for violin plot
        plot_data = []
        for residual, std_dev in zip(residuals_list, std_devs_list):
            generated_data = np.random.normal(loc=residual, scale=std_dev, size=1000)
            plot_data.append(generated_data)

        # Create the violin plot
        plt.figure(figsize=(10, 6))
        parts = plt.violinplot(plot_data, positions=kinematic_sets, widths=0.7, showmeans=False, showmedians=True, bw_method=0.5)

        for pc in parts['bodies']:
            pc.set_facecolor('gray')
            pc.set_edgecolor('black')
            pc.set_alpha(0.7)

        plt.axhline(y=0, color='black', linestyle='--', linewidth=1)  # Residuals centered around 0
        plt.xticks(kinematic_sets)
        plt.xlabel('Kinematic Set Number')
        plt.ylabel('Residual')
        plt.title(f'Violin Plot of {cff_label} Residuals Across Kinematic Sets')

        # Save the plot
        plot_path = os.path.join(output_dir, f'{cff_label}_Residuals_ViolinPlot.png')
        plt.tight_layout()
        plt.savefig(plot_path)
        plt.close()
        print(f"Violin plot saved: {plot_path}")

# Main Execution
if __name__ == "__main__":
    # Directory where CSVs from the previous stage are saved
    csv_directory = 'CFF_Residuals'
    
    # Aggregate the data from the CSVs
    temp_data = aggregate_data_from_csvs(cff_labels, csv_directory)
    
    # Generate and save the violin plots
    generate_violin_plots_for_cffs(temp_data, cff_labels)
